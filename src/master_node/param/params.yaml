#Params for AER1516 Project

#Setup Conditions
setup:
  use_jps3d: true
  use_global_mapper_ros: true
  jps_3d_on_goal_loc: false # False makes jps3d to be on 2DPose click to go mode

# Master Node Params
master:
  start_x: 0 # Start position
  start_y: 0
  start_z: 0
  start_yaw: 0
  start_delay: 3 # [s] before takeoff

  flight_z: 1 # Flight height [m]

  goal_x: 15 # Goal location if using static goal location [m]
  goal_y: 15
  goal_z: 1

  goal_mode: 0 # 0 = Static goal location, 1 = 2D nav goal from RViz
  path_mode: 0 # 0 = local planner, 1 = global planner passthrough, 2 = hold location
  global_plan_v: 0.25 # Flight speed for global planner mode [m/s]

# Mapper Params
mapr:
  blah: 0
  blah2: 0
  blah3: 0

#Global Planner Params
gp:
  blah: 0
  blah2: 0
  blah3: 0

#Convex Decomposer Params
cvx: #This helps you call it in the get_param : call it as rospy.get_param("~cvx/angle_lim") # angle below which planes have to be merged into one
#That way the param is accessible even if its loaded by a different node.
  offset_x: 0 #Offset for ellipsoids
  drone_radius: 0.42
  bbox: [2,2,1] #in meters
  angle_lim: 0.0  # in radians
  freq: 20 #Freqency of update cvx loop 
  global_frame: vicon

# Local Planner Params
lp:
  freq: 10 # Local replan rate [Hz]

  v_max: 3.0 # Speed constraint in local plan [m/s]
  a_max: 10.0 # Acceleration constraint in local plan [m/s2]
  j_max: 50.0 # Jerk constraint in local plan [m/s3]

  n_seg: 10  # Number of cubic spline segments in local plan trajectory
  n_int_max: 5 # Maximum number of JPS intervals/polyhedra considered
  n_plane_max: 8 # Maximum number of polyhedron planes considered per interval

  goal_FOV: 120 # FOV angle local planner will keep goal location within [deg]



################################################################3
# Global Mapper ROS Params: are in global_mapper.yaml 
#NOTE:  nodehandles will take care of these params so , no need to prefix a link.
global_frame: world
origin: [0.0, 0.0, 0.0]  # [m]
world_dimensions: [20.0, 20.0, 4.0]  # [m]  16   16   4
resolution: 0.15  # [m]   0.15
radius_drone: 1.0 # [m] This should be higher than the resolutions
Ra: 10.0 # [m] radius of the first sphere (Sa) in the planner. The unknown pcloud published will only contain points inside this sphere
z_ground: 0.1 #[m] points below z_ground are not published in the known grid
skip: 0  #[pixels] Numbers of pixels to skip in the depth map. Should be >=0
depth_max: 5.0 #[m] In the depth image, points farther than depth_max, are treated as inf (i.e. along its ray (and up to that point) only unknown voxels are cleared. If doing simulation, this should be the value of pointCloudCutoffMax in the file `asus_camera_urdf.xacro`
r1: 0.8 #[m] Points in the sphere centerd in the drone with r>r1 and r<r2 are published as unkown space
r2: 8.0 #[m] See above
z_min_unknown: 0.1 #[m] points below z_min_unkown are not published in the unkown grid
z_max_unknown: 5 #[m] points above z_max_unkown are not published in the unkown grid


occupancy_grid:
  init_value: -1.0
  hit_inc: 0.4 #Was 0.4  
  miss_inc: -0.01
  occupancy_threshold: 0.6  # [0.0, 1.0]
  publish_occupancy_grid: true
  publish_unknown_grid: true
  clear_unknown_distance: 5.0  # [m]  #Nan Â¿and inf? --> Clear the unkown voxels up to this distance

distance_grid:
  truncation_distance: 6  # [voxels]
  publish_distance_grid: false

cost_grid:
  publish_cost_grid: false
  publish_path: false
  inflation_distance: 4  # inflate obstacles by this many squared voxels
  altitude_weight: 20
  inflation_weight: 0
  unknown_weight: 20
  obstacle_weight: 10000
  target_altitude: 2  # target altitude [m]



########################################################################
#Params for FASTER

use_ff: true # use feedforward
visual: true #publish visualization stuff
dc: .01            #(seconds) Duration for the interpolation=Value of the timer pubGoal
goal_radius: 0.3    #[m] Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS
drone_radius: 0.42  #[m] Used for collision checking
force_goal_height: true
goal_height: 1  #[m] Assumed height for clicked 2d nav goals in Rviz  (not used if force_goal_height is true or if it is a ground robot )

N_whole: 6 #[-] Number of discretization points in the whole trajectory
N_safe: 6 #[-] Number of discretization points in the safe path

Ra: 10.0            # [m] Radius of the sphere S
w_max: 4.0          # [rd/s] Maximum angular velocity. ~4.0 for Hardware
alpha_filter_dyaw: 0 #was 0.92  #[] Filter parameter for dyaw, \in [0,1]. Higher--> More aggressive filtering

z_ground: 0.0         #[m] points below this are considered ground
z_max: 2         #[m] JPS is not allowed to give a solution that goes higher than this height
inflation_jps: 0.47  #[m] The obstacles are inflated (to run JPS) by this amount
factor_jps: 1  #[m] JPS is run with resolution=factor_jps*(resolution of the map)

v_max: 5.0   #[m/s]  1.4
a_max: 5.0   #[m/s2] 1.4
j_max: 8.0  #[m/s3] 35

#Factors for time allocation
gamma_whole: 20       #[-]
gammap_whole: 20  #[-]
increment_whole: 1.0 #[-]
gamma_safe: 20         #[-]
gammap_safe: 20    #[-]
increment_safe: 1.0   #[-]

delta_a: 0.5
delta_H: 1.0

max_poly_whole: 3 #Should be less than N_whole 
max_poly_safe: 3 #Should be less than N_safe
dist_max_vertexes: 1.5 #[m] Maximum distance between two vertexes in the JPS before doing the cvx decomp (more vertexes are added to force this)
gurobi_threads: 0 #[threads] Number of threads that Gurobi will use. If 0, Gurobi will try to choose all the cores.  If computer is maxed out, threads=1 works faster!
gurobi_verbose: 0 #Verbosity of Gurobi. 0 or 1

use_faster: true  #TODO (this param doesn't work yet) if false, it will plan only in free space

is_ground_robot: false

