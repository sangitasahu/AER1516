// Generated by gencpp from file map_simulator/Map3D.msg
// DO NOT EDIT!


#ifndef MAP_SIMULATOR_MESSAGE_MAP3D_H
#define MAP_SIMULATOR_MESSAGE_MAP3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace map_simulator
{
template <class ContainerAllocator>
struct Map3D_
{
  typedef Map3D_<ContainerAllocator> Type;

  Map3D_()
    : nodeCoordinates()
    , occupiedStatus()
    , nodeDistances()  {
    }
  Map3D_(const ContainerAllocator& _alloc)
    : nodeCoordinates(_alloc)
    , occupiedStatus(_alloc)
    , nodeDistances(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _nodeCoordinates_type;
  _nodeCoordinates_type nodeCoordinates;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _occupiedStatus_type;
  _occupiedStatus_type occupiedStatus;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _nodeDistances_type;
  _nodeDistances_type nodeDistances;





  typedef boost::shared_ptr< ::map_simulator::Map3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_simulator::Map3D_<ContainerAllocator> const> ConstPtr;

}; // struct Map3D_

typedef ::map_simulator::Map3D_<std::allocator<void> > Map3D;

typedef boost::shared_ptr< ::map_simulator::Map3D > Map3DPtr;
typedef boost::shared_ptr< ::map_simulator::Map3D const> Map3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_simulator::Map3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_simulator::Map3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_simulator::Map3D_<ContainerAllocator1> & lhs, const ::map_simulator::Map3D_<ContainerAllocator2> & rhs)
{
  return lhs.nodeCoordinates == rhs.nodeCoordinates &&
    lhs.occupiedStatus == rhs.occupiedStatus &&
    lhs.nodeDistances == rhs.nodeDistances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_simulator::Map3D_<ContainerAllocator1> & lhs, const ::map_simulator::Map3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::map_simulator::Map3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_simulator::Map3D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_simulator::Map3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_simulator::Map3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_simulator::Map3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_simulator::Map3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_simulator::Map3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad6c8afc9d0105744f261886c76d5da8";
  }

  static const char* value(const ::map_simulator::Map3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad6c8afc9d010574ULL;
  static const uint64_t static_value2 = 0x4f261886c76d5da8ULL;
};

template<class ContainerAllocator>
struct DataType< ::map_simulator::Map3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_simulator/Map3D";
  }

  static const char* value(const ::map_simulator::Map3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_simulator::Map3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3[] nodeCoordinates\n"
"bool[] occupiedStatus\n"
"uint16[] nodeDistances\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::map_simulator::Map3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_simulator::Map3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodeCoordinates);
      stream.next(m.occupiedStatus);
      stream.next(m.nodeDistances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Map3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_simulator::Map3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_simulator::Map3D_<ContainerAllocator>& v)
  {
    s << indent << "nodeCoordinates[]" << std::endl;
    for (size_t i = 0; i < v.nodeCoordinates.size(); ++i)
    {
      s << indent << "  nodeCoordinates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.nodeCoordinates[i]);
    }
    s << indent << "occupiedStatus[]" << std::endl;
    for (size_t i = 0; i < v.occupiedStatus.size(); ++i)
    {
      s << indent << "  occupiedStatus[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.occupiedStatus[i]);
    }
    s << indent << "nodeDistances[]" << std::endl;
    for (size_t i = 0; i < v.nodeDistances.size(); ++i)
    {
      s << indent << "  nodeDistances[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.nodeDistances[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_SIMULATOR_MESSAGE_MAP3D_H
