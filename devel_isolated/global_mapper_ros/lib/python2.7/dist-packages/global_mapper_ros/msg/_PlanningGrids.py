# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from global_mapper_ros/PlanningGrids.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PlanningGrids(genpy.Message):
  _md5sum = "86653f2401f7e451293296585b426430"
  _type = "global_mapper_ros/PlanningGrids"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64[3] projected_goal  # current position of projected goal within the grid
float64[3] origin  # center of map in global frame [m]
int32[3] grid_dimensions  # size of map [voxels]
float64 resolution  # voxel size [m]

float32[] occupancy_data
int32[] distance_data
int32[] cost_data

float32 occupied_threshold #occupancy values above this are considered 'occupied'
int32 dmax  #max squared distance reported in distance_grid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','projected_goal','origin','grid_dimensions','resolution','occupancy_data','distance_data','cost_data','occupied_threshold','dmax']
  _slot_types = ['std_msgs/Header','float64[3]','float64[3]','int32[3]','float64','float32[]','int32[]','int32[]','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,projected_goal,origin,grid_dimensions,resolution,occupancy_data,distance_data,cost_data,occupied_threshold,dmax

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningGrids, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.projected_goal is None:
        self.projected_goal = [0.] * 3
      if self.origin is None:
        self.origin = [0.] * 3
      if self.grid_dimensions is None:
        self.grid_dimensions = [0] * 3
      if self.resolution is None:
        self.resolution = 0.
      if self.occupancy_data is None:
        self.occupancy_data = []
      if self.distance_data is None:
        self.distance_data = []
      if self.cost_data is None:
        self.cost_data = []
      if self.occupied_threshold is None:
        self.occupied_threshold = 0.
      if self.dmax is None:
        self.dmax = 0
    else:
      self.header = std_msgs.msg.Header()
      self.projected_goal = [0.] * 3
      self.origin = [0.] * 3
      self.grid_dimensions = [0] * 3
      self.resolution = 0.
      self.occupancy_data = []
      self.distance_data = []
      self.cost_data = []
      self.occupied_threshold = 0.
      self.dmax = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3d().pack(*self.projected_goal))
      buff.write(_get_struct_3d().pack(*self.origin))
      buff.write(_get_struct_3i().pack(*self.grid_dimensions))
      _x = self.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.occupancy_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.occupancy_data))
      length = len(self.distance_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.distance_data))
      length = len(self.cost_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cost_data))
      _x = self
      buff.write(_get_struct_fi().pack(_x.occupied_threshold, _x.dmax))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 24
      self.projected_goal = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.origin = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 12
      self.grid_dimensions = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 8
      (self.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.occupancy_data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.distance_data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cost_data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.occupied_threshold, _x.dmax,) = _get_struct_fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.projected_goal.tostring())
      buff.write(self.origin.tostring())
      buff.write(self.grid_dimensions.tostring())
      _x = self.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.occupancy_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.occupancy_data.tostring())
      length = len(self.distance_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.distance_data.tostring())
      length = len(self.cost_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cost_data.tostring())
      _x = self
      buff.write(_get_struct_fi().pack(_x.occupied_threshold, _x.dmax))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 24
      self.projected_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.origin = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 12
      self.grid_dimensions = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      start = end
      end += 8
      (self.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.occupancy_data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.distance_data = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cost_data = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.occupied_threshold, _x.dmax,) = _get_struct_fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_fi = None
def _get_struct_fi():
    global _struct_fi
    if _struct_fi is None:
        _struct_fi = struct.Struct("<fi")
    return _struct_fi
