// Generated by gencpp from file convex_decomposer/Polyhedron.msg
// DO NOT EDIT!


#ifndef CONVEX_DECOMPOSER_MESSAGE_POLYHEDRON_H
#define CONVEX_DECOMPOSER_MESSAGE_POLYHEDRON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <shape_msgs/Plane.h>

namespace convex_decomposer
{
template <class ContainerAllocator>
struct Polyhedron_
{
  typedef Polyhedron_<ContainerAllocator> Type;

  Polyhedron_()
    : planes()  {
    }
  Polyhedron_(const ContainerAllocator& _alloc)
    : planes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::shape_msgs::Plane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::shape_msgs::Plane_<ContainerAllocator> >::other >  _planes_type;
  _planes_type planes;





  typedef boost::shared_ptr< ::convex_decomposer::Polyhedron_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::convex_decomposer::Polyhedron_<ContainerAllocator> const> ConstPtr;

}; // struct Polyhedron_

typedef ::convex_decomposer::Polyhedron_<std::allocator<void> > Polyhedron;

typedef boost::shared_ptr< ::convex_decomposer::Polyhedron > PolyhedronPtr;
typedef boost::shared_ptr< ::convex_decomposer::Polyhedron const> PolyhedronConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::convex_decomposer::Polyhedron_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::convex_decomposer::Polyhedron_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::convex_decomposer::Polyhedron_<ContainerAllocator1> & lhs, const ::convex_decomposer::Polyhedron_<ContainerAllocator2> & rhs)
{
  return lhs.planes == rhs.planes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::convex_decomposer::Polyhedron_<ContainerAllocator1> & lhs, const ::convex_decomposer::Polyhedron_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace convex_decomposer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::convex_decomposer::Polyhedron_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::convex_decomposer::Polyhedron_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::convex_decomposer::Polyhedron_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18bc595cd5fca2d6b49e654a7e19a442";
  }

  static const char* value(const ::convex_decomposer::Polyhedron_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18bc595cd5fca2d6ULL;
  static const uint64_t static_value2 = 0xb49e654a7e19a442ULL;
};

template<class ContainerAllocator>
struct DataType< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
{
  static const char* value()
  {
    return "convex_decomposer/Polyhedron";
  }

  static const char* value(const ::convex_decomposer::Polyhedron_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shape_msgs/Plane[] planes\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/Plane\n"
"# Representation of a plane, using the plane equation ax + by + cz + d = 0\n"
"\n"
"# a := coef[0]\n"
"# b := coef[1]\n"
"# c := coef[2]\n"
"# d := coef[3]\n"
"\n"
"float64[4] coef\n"
;
  }

  static const char* value(const ::convex_decomposer::Polyhedron_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Polyhedron_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::convex_decomposer::Polyhedron_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::convex_decomposer::Polyhedron_<ContainerAllocator>& v)
  {
    s << indent << "planes[]" << std::endl;
    for (size_t i = 0; i < v.planes.size(); ++i)
    {
      s << indent << "  planes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::shape_msgs::Plane_<ContainerAllocator> >::stream(s, indent + "    ", v.planes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEX_DECOMPOSER_MESSAGE_POLYHEDRON_H
