# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snapstack_msgs/ControlLog.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ControlLog(genpy.Message):
  _md5sum = "0127ad6ed84894e6d10c273726d40503"
  _type = "snapstack_msgs/ControlLog"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The outer loop trajectory tracker generates this msg for analysis / debugging

Header header

# position signals
geometry_msgs/Vector3 p
geometry_msgs/Vector3 p_ref
geometry_msgs/Vector3 p_err
geometry_msgs/Vector3 p_err_int

# velocity signals
geometry_msgs/Vector3 v
geometry_msgs/Vector3 v_ref
geometry_msgs/Vector3 v_err

# acceleration signals
geometry_msgs/Vector3 a_ff
geometry_msgs/Vector3 a_fb

# jerk signals
geometry_msgs/Vector3 j_ff
geometry_msgs/Vector3 j_fb

# attitude signals
geometry_msgs/Quaternion q
geometry_msgs/Quaternion q_ref
geometry_msgs/Vector3 rpy
geometry_msgs/Vector3 rpy_ref

# angular rate signals
geometry_msgs/Vector3 w
geometry_msgs/Vector3 w_ref

geometry_msgs/Vector3 F_W # Desired total force [N], expressed in world
float64 thrust   # total desired force [N]
float64 throttle # percent throttle sent to each motor

bool power # true if motors should be able to spin

# TODO: add outer (and inner?) parameters
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','p','p_ref','p_err','p_err_int','v','v_ref','v_err','a_ff','a_fb','j_ff','j_fb','q','q_ref','rpy','rpy_ref','w','w_ref','F_W','thrust','throttle','power']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,p,p_ref,p_err,p_err_int,v,v_ref,v_err,a_ff,a_fb,j_ff,j_fb,q,q_ref,rpy,rpy_ref,w,w_ref,F_W,thrust,throttle,power

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlLog, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p is None:
        self.p = geometry_msgs.msg.Vector3()
      if self.p_ref is None:
        self.p_ref = geometry_msgs.msg.Vector3()
      if self.p_err is None:
        self.p_err = geometry_msgs.msg.Vector3()
      if self.p_err_int is None:
        self.p_err_int = geometry_msgs.msg.Vector3()
      if self.v is None:
        self.v = geometry_msgs.msg.Vector3()
      if self.v_ref is None:
        self.v_ref = geometry_msgs.msg.Vector3()
      if self.v_err is None:
        self.v_err = geometry_msgs.msg.Vector3()
      if self.a_ff is None:
        self.a_ff = geometry_msgs.msg.Vector3()
      if self.a_fb is None:
        self.a_fb = geometry_msgs.msg.Vector3()
      if self.j_ff is None:
        self.j_ff = geometry_msgs.msg.Vector3()
      if self.j_fb is None:
        self.j_fb = geometry_msgs.msg.Vector3()
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      if self.q_ref is None:
        self.q_ref = geometry_msgs.msg.Quaternion()
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.rpy_ref is None:
        self.rpy_ref = geometry_msgs.msg.Vector3()
      if self.w is None:
        self.w = geometry_msgs.msg.Vector3()
      if self.w_ref is None:
        self.w_ref = geometry_msgs.msg.Vector3()
      if self.F_W is None:
        self.F_W = geometry_msgs.msg.Vector3()
      if self.thrust is None:
        self.thrust = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.power is None:
        self.power = False
    else:
      self.header = std_msgs.msg.Header()
      self.p = geometry_msgs.msg.Vector3()
      self.p_ref = geometry_msgs.msg.Vector3()
      self.p_err = geometry_msgs.msg.Vector3()
      self.p_err_int = geometry_msgs.msg.Vector3()
      self.v = geometry_msgs.msg.Vector3()
      self.v_ref = geometry_msgs.msg.Vector3()
      self.v_err = geometry_msgs.msg.Vector3()
      self.a_ff = geometry_msgs.msg.Vector3()
      self.a_fb = geometry_msgs.msg.Vector3()
      self.j_ff = geometry_msgs.msg.Vector3()
      self.j_fb = geometry_msgs.msg.Vector3()
      self.q = geometry_msgs.msg.Quaternion()
      self.q_ref = geometry_msgs.msg.Quaternion()
      self.rpy = geometry_msgs.msg.Vector3()
      self.rpy_ref = geometry_msgs.msg.Vector3()
      self.w = geometry_msgs.msg.Vector3()
      self.w_ref = geometry_msgs.msg.Vector3()
      self.F_W = geometry_msgs.msg.Vector3()
      self.thrust = 0.
      self.throttle = 0.
      self.power = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_58dB().pack(_x.p.x, _x.p.y, _x.p.z, _x.p_ref.x, _x.p_ref.y, _x.p_ref.z, _x.p_err.x, _x.p_err.y, _x.p_err.z, _x.p_err_int.x, _x.p_err_int.y, _x.p_err_int.z, _x.v.x, _x.v.y, _x.v.z, _x.v_ref.x, _x.v_ref.y, _x.v_ref.z, _x.v_err.x, _x.v_err.y, _x.v_err.z, _x.a_ff.x, _x.a_ff.y, _x.a_ff.z, _x.a_fb.x, _x.a_fb.y, _x.a_fb.z, _x.j_ff.x, _x.j_ff.y, _x.j_ff.z, _x.j_fb.x, _x.j_fb.y, _x.j_fb.z, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.q_ref.x, _x.q_ref.y, _x.q_ref.z, _x.q_ref.w, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_ref.x, _x.rpy_ref.y, _x.rpy_ref.z, _x.w.x, _x.w.y, _x.w.z, _x.w_ref.x, _x.w_ref.y, _x.w_ref.z, _x.F_W.x, _x.F_W.y, _x.F_W.z, _x.thrust, _x.throttle, _x.power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p is None:
        self.p = geometry_msgs.msg.Vector3()
      if self.p_ref is None:
        self.p_ref = geometry_msgs.msg.Vector3()
      if self.p_err is None:
        self.p_err = geometry_msgs.msg.Vector3()
      if self.p_err_int is None:
        self.p_err_int = geometry_msgs.msg.Vector3()
      if self.v is None:
        self.v = geometry_msgs.msg.Vector3()
      if self.v_ref is None:
        self.v_ref = geometry_msgs.msg.Vector3()
      if self.v_err is None:
        self.v_err = geometry_msgs.msg.Vector3()
      if self.a_ff is None:
        self.a_ff = geometry_msgs.msg.Vector3()
      if self.a_fb is None:
        self.a_fb = geometry_msgs.msg.Vector3()
      if self.j_ff is None:
        self.j_ff = geometry_msgs.msg.Vector3()
      if self.j_fb is None:
        self.j_fb = geometry_msgs.msg.Vector3()
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      if self.q_ref is None:
        self.q_ref = geometry_msgs.msg.Quaternion()
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.rpy_ref is None:
        self.rpy_ref = geometry_msgs.msg.Vector3()
      if self.w is None:
        self.w = geometry_msgs.msg.Vector3()
      if self.w_ref is None:
        self.w_ref = geometry_msgs.msg.Vector3()
      if self.F_W is None:
        self.F_W = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 465
      (_x.p.x, _x.p.y, _x.p.z, _x.p_ref.x, _x.p_ref.y, _x.p_ref.z, _x.p_err.x, _x.p_err.y, _x.p_err.z, _x.p_err_int.x, _x.p_err_int.y, _x.p_err_int.z, _x.v.x, _x.v.y, _x.v.z, _x.v_ref.x, _x.v_ref.y, _x.v_ref.z, _x.v_err.x, _x.v_err.y, _x.v_err.z, _x.a_ff.x, _x.a_ff.y, _x.a_ff.z, _x.a_fb.x, _x.a_fb.y, _x.a_fb.z, _x.j_ff.x, _x.j_ff.y, _x.j_ff.z, _x.j_fb.x, _x.j_fb.y, _x.j_fb.z, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.q_ref.x, _x.q_ref.y, _x.q_ref.z, _x.q_ref.w, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_ref.x, _x.rpy_ref.y, _x.rpy_ref.z, _x.w.x, _x.w.y, _x.w.z, _x.w_ref.x, _x.w_ref.y, _x.w_ref.z, _x.F_W.x, _x.F_W.y, _x.F_W.z, _x.thrust, _x.throttle, _x.power,) = _get_struct_58dB().unpack(str[start:end])
      self.power = bool(self.power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_58dB().pack(_x.p.x, _x.p.y, _x.p.z, _x.p_ref.x, _x.p_ref.y, _x.p_ref.z, _x.p_err.x, _x.p_err.y, _x.p_err.z, _x.p_err_int.x, _x.p_err_int.y, _x.p_err_int.z, _x.v.x, _x.v.y, _x.v.z, _x.v_ref.x, _x.v_ref.y, _x.v_ref.z, _x.v_err.x, _x.v_err.y, _x.v_err.z, _x.a_ff.x, _x.a_ff.y, _x.a_ff.z, _x.a_fb.x, _x.a_fb.y, _x.a_fb.z, _x.j_ff.x, _x.j_ff.y, _x.j_ff.z, _x.j_fb.x, _x.j_fb.y, _x.j_fb.z, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.q_ref.x, _x.q_ref.y, _x.q_ref.z, _x.q_ref.w, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_ref.x, _x.rpy_ref.y, _x.rpy_ref.z, _x.w.x, _x.w.y, _x.w.z, _x.w_ref.x, _x.w_ref.y, _x.w_ref.z, _x.F_W.x, _x.F_W.y, _x.F_W.z, _x.thrust, _x.throttle, _x.power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p is None:
        self.p = geometry_msgs.msg.Vector3()
      if self.p_ref is None:
        self.p_ref = geometry_msgs.msg.Vector3()
      if self.p_err is None:
        self.p_err = geometry_msgs.msg.Vector3()
      if self.p_err_int is None:
        self.p_err_int = geometry_msgs.msg.Vector3()
      if self.v is None:
        self.v = geometry_msgs.msg.Vector3()
      if self.v_ref is None:
        self.v_ref = geometry_msgs.msg.Vector3()
      if self.v_err is None:
        self.v_err = geometry_msgs.msg.Vector3()
      if self.a_ff is None:
        self.a_ff = geometry_msgs.msg.Vector3()
      if self.a_fb is None:
        self.a_fb = geometry_msgs.msg.Vector3()
      if self.j_ff is None:
        self.j_ff = geometry_msgs.msg.Vector3()
      if self.j_fb is None:
        self.j_fb = geometry_msgs.msg.Vector3()
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      if self.q_ref is None:
        self.q_ref = geometry_msgs.msg.Quaternion()
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.rpy_ref is None:
        self.rpy_ref = geometry_msgs.msg.Vector3()
      if self.w is None:
        self.w = geometry_msgs.msg.Vector3()
      if self.w_ref is None:
        self.w_ref = geometry_msgs.msg.Vector3()
      if self.F_W is None:
        self.F_W = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 465
      (_x.p.x, _x.p.y, _x.p.z, _x.p_ref.x, _x.p_ref.y, _x.p_ref.z, _x.p_err.x, _x.p_err.y, _x.p_err.z, _x.p_err_int.x, _x.p_err_int.y, _x.p_err_int.z, _x.v.x, _x.v.y, _x.v.z, _x.v_ref.x, _x.v_ref.y, _x.v_ref.z, _x.v_err.x, _x.v_err.y, _x.v_err.z, _x.a_ff.x, _x.a_ff.y, _x.a_ff.z, _x.a_fb.x, _x.a_fb.y, _x.a_fb.z, _x.j_ff.x, _x.j_ff.y, _x.j_ff.z, _x.j_fb.x, _x.j_fb.y, _x.j_fb.z, _x.q.x, _x.q.y, _x.q.z, _x.q.w, _x.q_ref.x, _x.q_ref.y, _x.q_ref.z, _x.q_ref.w, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_ref.x, _x.rpy_ref.y, _x.rpy_ref.z, _x.w.x, _x.w.y, _x.w.z, _x.w_ref.x, _x.w_ref.y, _x.w_ref.z, _x.F_W.x, _x.F_W.y, _x.F_W.z, _x.thrust, _x.throttle, _x.power,) = _get_struct_58dB().unpack(str[start:end])
      self.power = bool(self.power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_58dB = None
def _get_struct_58dB():
    global _struct_58dB
    if _struct_58dB is None:
        _struct_58dB = struct.Struct("<58dB")
    return _struct_58dB
