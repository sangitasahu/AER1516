// Generated by gencpp from file snapstack_msgs/SMCData.msg
// DO NOT EDIT!


#ifndef SNAPSTACK_MSGS_MESSAGE_SMCDATA_H
#define SNAPSTACK_MSGS_MESSAGE_SMCDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace snapstack_msgs
{
template <class ContainerAllocator>
struct SMCData_
{
  typedef SMCData_<ContainerAllocator> Type;

  SMCData_()
    : header()
    , q_des()
    , q_act()
    , q_err()
    , w_des()
    , w_act()
    , w_err()
    , s()
    , integrator()  {
    }
  SMCData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , q_des(_alloc)
    , q_act(_alloc)
    , q_err(_alloc)
    , w_des(_alloc)
    , w_act(_alloc)
    , w_err(_alloc)
    , s(_alloc)
    , integrator(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_des_type;
  _q_des_type q_des;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_act_type;
  _q_act_type q_act;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_err_type;
  _q_err_type q_err;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _w_des_type;
  _w_des_type w_des;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _w_act_type;
  _w_act_type w_act;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _w_err_type;
  _w_err_type w_err;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _s_type;
  _s_type s;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _integrator_type;
  _integrator_type integrator;





  typedef boost::shared_ptr< ::snapstack_msgs::SMCData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snapstack_msgs::SMCData_<ContainerAllocator> const> ConstPtr;

}; // struct SMCData_

typedef ::snapstack_msgs::SMCData_<std::allocator<void> > SMCData;

typedef boost::shared_ptr< ::snapstack_msgs::SMCData > SMCDataPtr;
typedef boost::shared_ptr< ::snapstack_msgs::SMCData const> SMCDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snapstack_msgs::SMCData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snapstack_msgs::SMCData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snapstack_msgs::SMCData_<ContainerAllocator1> & lhs, const ::snapstack_msgs::SMCData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.q_des == rhs.q_des &&
    lhs.q_act == rhs.q_act &&
    lhs.q_err == rhs.q_err &&
    lhs.w_des == rhs.w_des &&
    lhs.w_act == rhs.w_act &&
    lhs.w_err == rhs.w_err &&
    lhs.s == rhs.s &&
    lhs.integrator == rhs.integrator;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snapstack_msgs::SMCData_<ContainerAllocator1> & lhs, const ::snapstack_msgs::SMCData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snapstack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::snapstack_msgs::SMCData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snapstack_msgs::SMCData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snapstack_msgs::SMCData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snapstack_msgs::SMCData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snapstack_msgs::SMCData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snapstack_msgs::SMCData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snapstack_msgs::SMCData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "770bb55175c5011439eecf37b221a3d4";
  }

  static const char* value(const ::snapstack_msgs::SMCData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x770bb55175c50114ULL;
  static const uint64_t static_value2 = 0x39eecf37b221a3d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::snapstack_msgs::SMCData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snapstack_msgs/SMCData";
  }

  static const char* value(const ::snapstack_msgs::SMCData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snapstack_msgs::SMCData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Quaternion q_des\n"
"geometry_msgs/Quaternion q_act\n"
"geometry_msgs/Quaternion q_err\n"
"\n"
"geometry_msgs/Vector3 w_des\n"
"geometry_msgs/Vector3 w_act\n"
"geometry_msgs/Vector3 w_err\n"
"\n"
"geometry_msgs/Vector3 s\n"
"geometry_msgs/Vector3 integrator\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::snapstack_msgs::SMCData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snapstack_msgs::SMCData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.q_des);
      stream.next(m.q_act);
      stream.next(m.q_err);
      stream.next(m.w_des);
      stream.next(m.w_act);
      stream.next(m.w_err);
      stream.next(m.s);
      stream.next(m.integrator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SMCData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snapstack_msgs::SMCData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snapstack_msgs::SMCData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "q_des: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q_des);
    s << indent << "q_act: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q_act);
    s << indent << "q_err: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q_err);
    s << indent << "w_des: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.w_des);
    s << indent << "w_act: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.w_act);
    s << indent << "w_err: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.w_err);
    s << indent << "s: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.s);
    s << indent << "integrator: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.integrator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAPSTACK_MSGS_MESSAGE_SMCDATA_H
