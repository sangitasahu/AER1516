// Generated by gencpp from file decomp_ros_msgs/Ellipsoid.msg
// DO NOT EDIT!


#ifndef DECOMP_ROS_MSGS_MESSAGE_ELLIPSOID_H
#define DECOMP_ROS_MSGS_MESSAGE_ELLIPSOID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace decomp_ros_msgs
{
template <class ContainerAllocator>
struct Ellipsoid_
{
  typedef Ellipsoid_<ContainerAllocator> Type;

  Ellipsoid_()
    : d()
    , E()  {
      d.assign(0.0);

      E.assign(0.0);
  }
  Ellipsoid_(const ContainerAllocator& _alloc)
    : d()
    , E()  {
  (void)_alloc;
      d.assign(0.0);

      E.assign(0.0);
  }



   typedef boost::array<double, 3>  _d_type;
  _d_type d;

   typedef boost::array<double, 9>  _E_type;
  _E_type E;





  typedef boost::shared_ptr< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> const> ConstPtr;

}; // struct Ellipsoid_

typedef ::decomp_ros_msgs::Ellipsoid_<std::allocator<void> > Ellipsoid;

typedef boost::shared_ptr< ::decomp_ros_msgs::Ellipsoid > EllipsoidPtr;
typedef boost::shared_ptr< ::decomp_ros_msgs::Ellipsoid const> EllipsoidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator1> & lhs, const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator2> & rhs)
{
  return lhs.d == rhs.d &&
    lhs.E == rhs.E;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator1> & lhs, const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace decomp_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56675b593d9a5da51b91765fa8f29c87";
  }

  static const char* value(const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56675b593d9a5da5ULL;
  static const uint64_t static_value2 = 0x1b91765fa8f29c87ULL;
};

template<class ContainerAllocator>
struct DataType< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decomp_ros_msgs/Ellipsoid";
  }

  static const char* value(const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] d\n"
"float64[9] E\n"
;
  }

  static const char* value(const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.d);
      stream.next(m.E);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ellipsoid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decomp_ros_msgs::Ellipsoid_<ContainerAllocator>& v)
  {
    s << indent << "d[]" << std::endl;
    for (size_t i = 0; i < v.d.size(); ++i)
    {
      s << indent << "  d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.d[i]);
    }
    s << indent << "E[]" << std::endl;
    for (size_t i = 0; i < v.E.size(); ++i)
    {
      s << indent << "  E[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.E[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECOMP_ROS_MSGS_MESSAGE_ELLIPSOID_H
