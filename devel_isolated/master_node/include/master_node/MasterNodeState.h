// Generated by gencpp from file master_node/MasterNodeState.msg
// DO NOT EDIT!


#ifndef MASTER_NODE_MESSAGE_MASTERNODESTATE_H
#define MASTER_NODE_MESSAGE_MASTERNODESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace master_node
{
template <class ContainerAllocator>
struct MasterNodeState_
{
  typedef MasterNodeState_<ContainerAllocator> Type;

  MasterNodeState_()
    : header()
    , state(0)  {
    }
  MasterNodeState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(TAKEOFF)
  #undef TAKEOFF
#endif
#if defined(_WIN32) && defined(FLIGHT_LOCAL)
  #undef FLIGHT_LOCAL
#endif
#if defined(_WIN32) && defined(FLIGHT_GLOBAL)
  #undef FLIGHT_GLOBAL
#endif
#if defined(_WIN32) && defined(FLIGHT_HOLD)
  #undef FLIGHT_HOLD
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    IDLE = 0,
    TAKEOFF = 1,
    FLIGHT_LOCAL = 2,
    FLIGHT_GLOBAL = 3,
    FLIGHT_HOLD = 4,
    UNKNOWN = 10,
  };


  typedef boost::shared_ptr< ::master_node::MasterNodeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_node::MasterNodeState_<ContainerAllocator> const> ConstPtr;

}; // struct MasterNodeState_

typedef ::master_node::MasterNodeState_<std::allocator<void> > MasterNodeState;

typedef boost::shared_ptr< ::master_node::MasterNodeState > MasterNodeStatePtr;
typedef boost::shared_ptr< ::master_node::MasterNodeState const> MasterNodeStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_node::MasterNodeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_node::MasterNodeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_node::MasterNodeState_<ContainerAllocator1> & lhs, const ::master_node::MasterNodeState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_node::MasterNodeState_<ContainerAllocator1> & lhs, const ::master_node::MasterNodeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::master_node::MasterNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_node::MasterNodeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_node::MasterNodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_node::MasterNodeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_node::MasterNodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_node::MasterNodeState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_node::MasterNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94ab713c34436e1423557ad1082b0f2c";
  }

  static const char* value(const ::master_node::MasterNodeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94ab713c34436e14ULL;
  static const uint64_t static_value2 = 0x23557ad1082b0f2cULL;
};

template<class ContainerAllocator>
struct DataType< ::master_node::MasterNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_node/MasterNodeState";
  }

  static const char* value(const ::master_node::MasterNodeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_node::MasterNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int16 IDLE = 0\n"
"int16 TAKEOFF = 1\n"
"int16 FLIGHT_LOCAL = 2\n"
"int16 FLIGHT_GLOBAL = 3\n"
"int16 FLIGHT_HOLD = 4\n"
"int16 UNKNOWN = 10\n"
"int16 state\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::master_node::MasterNodeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_node::MasterNodeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MasterNodeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_node::MasterNodeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_node::MasterNodeState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_NODE_MESSAGE_MASTERNODESTATE_H
